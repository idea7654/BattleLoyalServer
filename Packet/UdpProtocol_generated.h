// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_UDPPROTOCOL_MYPROTOCOL_H_
#define FLATBUFFERS_GENERATED_UDPPROTOCOL_MYPROTOCOL_H_

#include "flatbuffers/flatbuffers.h"

namespace MyProtocol {

struct Vec3;

struct Message;
struct MessageBuilder;

struct S2C_MOVE;
struct S2C_MOVEBuilder;

struct S2C_SHOOT;
struct S2C_SHOOTBuilder;

enum MESSAGE_ID : uint8_t {
  MESSAGE_ID_NONE = 0,
  MESSAGE_ID_S2C_MOVE = 1,
  MESSAGE_ID_S2C_SHOOT = 2,
  MESSAGE_ID_MIN = MESSAGE_ID_NONE,
  MESSAGE_ID_MAX = MESSAGE_ID_S2C_SHOOT
};

inline const MESSAGE_ID (&EnumValuesMESSAGE_ID())[3] {
  static const MESSAGE_ID values[] = {
    MESSAGE_ID_NONE,
    MESSAGE_ID_S2C_MOVE,
    MESSAGE_ID_S2C_SHOOT
  };
  return values;
}

inline const char * const *EnumNamesMESSAGE_ID() {
  static const char * const names[4] = {
    "NONE",
    "S2C_MOVE",
    "S2C_SHOOT",
    nullptr
  };
  return names;
}

inline const char *EnumNameMESSAGE_ID(MESSAGE_ID e) {
  if (flatbuffers::IsOutRange(e, MESSAGE_ID_NONE, MESSAGE_ID_S2C_SHOOT)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMESSAGE_ID()[index];
}

template<typename T> struct MESSAGE_IDTraits {
  static const MESSAGE_ID enum_value = MESSAGE_ID_NONE;
};

template<> struct MESSAGE_IDTraits<MyProtocol::S2C_MOVE> {
  static const MESSAGE_ID enum_value = MESSAGE_ID_S2C_MOVE;
};

template<> struct MESSAGE_IDTraits<MyProtocol::S2C_SHOOT> {
  static const MESSAGE_ID enum_value = MESSAGE_ID_S2C_SHOOT;
};

bool VerifyMESSAGE_ID(flatbuffers::Verifier &verifier, const void *obj, MESSAGE_ID type);
bool VerifyMESSAGE_IDVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PACKET_TYPE = 4,
    VT_PACKET = 6
  };
  MyProtocol::MESSAGE_ID packet_type() const {
    return static_cast<MyProtocol::MESSAGE_ID>(GetField<uint8_t>(VT_PACKET_TYPE, 0));
  }
  const void *packet() const {
    return GetPointer<const void *>(VT_PACKET);
  }
  template<typename T> const T *packet_as() const;
  const MyProtocol::S2C_MOVE *packet_as_S2C_MOVE() const {
    return packet_type() == MyProtocol::MESSAGE_ID_S2C_MOVE ? static_cast<const MyProtocol::S2C_MOVE *>(packet()) : nullptr;
  }
  const MyProtocol::S2C_SHOOT *packet_as_S2C_SHOOT() const {
    return packet_type() == MyProtocol::MESSAGE_ID_S2C_SHOOT ? static_cast<const MyProtocol::S2C_SHOOT *>(packet()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_PACKET_TYPE) &&
           VerifyOffset(verifier, VT_PACKET) &&
           VerifyMESSAGE_ID(verifier, packet(), packet_type()) &&
           verifier.EndTable();
  }
};

template<> inline const MyProtocol::S2C_MOVE *Message::packet_as<MyProtocol::S2C_MOVE>() const {
  return packet_as_S2C_MOVE();
}

template<> inline const MyProtocol::S2C_SHOOT *Message::packet_as<MyProtocol::S2C_SHOOT>() const {
  return packet_as_S2C_SHOOT();
}

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_packet_type(MyProtocol::MESSAGE_ID packet_type) {
    fbb_.AddElement<uint8_t>(Message::VT_PACKET_TYPE, static_cast<uint8_t>(packet_type), 0);
  }
  void add_packet(flatbuffers::Offset<void> packet) {
    fbb_.AddOffset(Message::VT_PACKET, packet);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    MyProtocol::MESSAGE_ID packet_type = MyProtocol::MESSAGE_ID_NONE,
    flatbuffers::Offset<void> packet = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_packet(packet);
  builder_.add_packet_type(packet_type);
  return builder_.Finish();
}

struct S2C_MOVE FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef S2C_MOVEBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NICK_NAME = 4,
    VT_POS = 6,
    VT_DIR = 8
  };
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  const MyProtocol::Vec3 *pos() const {
    return GetStruct<const MyProtocol::Vec3 *>(VT_POS);
  }
  const MyProtocol::Vec3 *dir() const {
    return GetStruct<const MyProtocol::Vec3 *>(VT_DIR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<MyProtocol::Vec3>(verifier, VT_POS) &&
           VerifyField<MyProtocol::Vec3>(verifier, VT_DIR) &&
           verifier.EndTable();
  }
};

struct S2C_MOVEBuilder {
  typedef S2C_MOVE Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(S2C_MOVE::VT_NICK_NAME, nick_name);
  }
  void add_pos(const MyProtocol::Vec3 *pos) {
    fbb_.AddStruct(S2C_MOVE::VT_POS, pos);
  }
  void add_dir(const MyProtocol::Vec3 *dir) {
    fbb_.AddStruct(S2C_MOVE::VT_DIR, dir);
  }
  explicit S2C_MOVEBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<S2C_MOVE> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<S2C_MOVE>(end);
    return o;
  }
};

inline flatbuffers::Offset<S2C_MOVE> CreateS2C_MOVE(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    const MyProtocol::Vec3 *pos = 0,
    const MyProtocol::Vec3 *dir = 0) {
  S2C_MOVEBuilder builder_(_fbb);
  builder_.add_dir(dir);
  builder_.add_pos(pos);
  builder_.add_nick_name(nick_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<S2C_MOVE> CreateS2C_MOVEDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *nick_name = nullptr,
    const MyProtocol::Vec3 *pos = 0,
    const MyProtocol::Vec3 *dir = 0) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  return MyProtocol::CreateS2C_MOVE(
      _fbb,
      nick_name__,
      pos,
      dir);
}

struct S2C_SHOOT FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef S2C_SHOOTBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NICK_NAME = 4,
    VT_POS = 6,
    VT_DIR = 8
  };
  const flatbuffers::String *nick_name() const {
    return GetPointer<const flatbuffers::String *>(VT_NICK_NAME);
  }
  const MyProtocol::Vec3 *pos() const {
    return GetStruct<const MyProtocol::Vec3 *>(VT_POS);
  }
  const MyProtocol::Vec3 *dir() const {
    return GetStruct<const MyProtocol::Vec3 *>(VT_DIR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NICK_NAME) &&
           verifier.VerifyString(nick_name()) &&
           VerifyField<MyProtocol::Vec3>(verifier, VT_POS) &&
           VerifyField<MyProtocol::Vec3>(verifier, VT_DIR) &&
           verifier.EndTable();
  }
};

struct S2C_SHOOTBuilder {
  typedef S2C_SHOOT Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nick_name(flatbuffers::Offset<flatbuffers::String> nick_name) {
    fbb_.AddOffset(S2C_SHOOT::VT_NICK_NAME, nick_name);
  }
  void add_pos(const MyProtocol::Vec3 *pos) {
    fbb_.AddStruct(S2C_SHOOT::VT_POS, pos);
  }
  void add_dir(const MyProtocol::Vec3 *dir) {
    fbb_.AddStruct(S2C_SHOOT::VT_DIR, dir);
  }
  explicit S2C_SHOOTBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<S2C_SHOOT> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<S2C_SHOOT>(end);
    return o;
  }
};

inline flatbuffers::Offset<S2C_SHOOT> CreateS2C_SHOOT(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> nick_name = 0,
    const MyProtocol::Vec3 *pos = 0,
    const MyProtocol::Vec3 *dir = 0) {
  S2C_SHOOTBuilder builder_(_fbb);
  builder_.add_dir(dir);
  builder_.add_pos(pos);
  builder_.add_nick_name(nick_name);
  return builder_.Finish();
}

inline flatbuffers::Offset<S2C_SHOOT> CreateS2C_SHOOTDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *nick_name = nullptr,
    const MyProtocol::Vec3 *pos = 0,
    const MyProtocol::Vec3 *dir = 0) {
  auto nick_name__ = nick_name ? _fbb.CreateString(nick_name) : 0;
  return MyProtocol::CreateS2C_SHOOT(
      _fbb,
      nick_name__,
      pos,
      dir);
}

inline bool VerifyMESSAGE_ID(flatbuffers::Verifier &verifier, const void *obj, MESSAGE_ID type) {
  switch (type) {
    case MESSAGE_ID_NONE: {
      return true;
    }
    case MESSAGE_ID_S2C_MOVE: {
      auto ptr = reinterpret_cast<const MyProtocol::S2C_MOVE *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MESSAGE_ID_S2C_SHOOT: {
      auto ptr = reinterpret_cast<const MyProtocol::S2C_SHOOT *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMESSAGE_IDVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMESSAGE_ID(
        verifier,  values->Get(i), types->GetEnum<MESSAGE_ID>(i))) {
      return false;
    }
  }
  return true;
}

inline const MyProtocol::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<MyProtocol::Message>(buf);
}

inline const MyProtocol::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MyProtocol::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyProtocol::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MyProtocol::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyProtocol::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyProtocol::Message> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace MyProtocol

#endif  // FLATBUFFERS_GENERATED_UDPPROTOCOL_MYPROTOCOL_H_
